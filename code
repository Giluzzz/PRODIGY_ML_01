House value prediction based on square footage number of bedrooms and bathrooms

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

from google.colab import files

# Upload the file
uploaded = files.upload()
# Access the uploaded file
data = pd.read_csv('train (1).csv')
# Selecting relevant features
data = data[['SalePrice', 'GrLivArea', 'BedroomAbvGr', 'FullBath']]

# Rename columns for convenience
data.columns = ['Price', 'SquareFootage', 'Bedrooms', 'Bathrooms']

# Drop rows with missing values
data.dropna(inplace=True)
# Adding interaction terms and polynomial features
poly = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly.fit_transform(data[['SquareFootage', 'Bedrooms', 'Bathrooms']])
feature_names = poly.get_feature_names_out(['SquareFootage', 'Bedrooms', 'Bathrooms'])

# Create a DataFrame with the new features
X_poly_df = pd.DataFrame(X_poly, columns=feature_names)
# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_poly_df)
# Target variable
y = data['Price']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Using Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)
# Predictions
y_pred = model.predict(X_test)
# Evaluate Model Performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("RÂ² Score:", r2)
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.show()
# test file loading
from google.colab import files

# Upload the file
uploaded = files.upload()
# Access the uploaded file
test_data = pd.read_csv('test (2).csv')

  # Selecting relevant features
test_data = test_data[['GrLivArea', 'BedroomAbvGr', 'FullBath']]

# Rename columns for convenience
test_data.columns = ['SquareFootage', 'Bedrooms', 'Bathrooms']

# Drop rows with missing values
test_data.dropna(inplace=True)
# Adding interaction terms and polynomial features

X_poly_test = poly.fit_transform(test_data[['SquareFootage', 'Bedrooms', 'Bathrooms']])
feature_names = poly.get_feature_names_out(['SquareFootage', 'Bedrooms', 'Bathrooms'])
# Create a DataFrame with the new features
X_poly_df_test = pd.DataFrame(X_poly_test, columns=feature_names)
# Scale the features
scaler = StandardScaler()
X_scaled_test = scaler.fit_transform(X_poly_df_test)
# Predictions
y_pred_test = model.predict(X_scaled_test)
print("Predicted Price:", y_pred_test)

